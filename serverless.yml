# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: CreditCard

custom:
 defaultStage : dev
 currentStage : "${opt:stage, self:custom.defaultStage}"
 AUTH_POOL_ARN: "${file(serverless-env.yml):${self:custom.currentStage}.AUTH_POOL_ARN}"

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs6.10
  region: ap-south-1
  stage: ${self:custom.currentStage}
  endPointType: regional
  memorySize: 1024 # optional, in MB, default is 1024
  timeout: 30 # optional, in seconds, default is 6
  versionFunctions: false
  environment: ${file(serverless-env.yml):${self:provider.stage}}

# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  getcommonmaster:
    handler: CCMasters/MastersAPI.getcommonmasterhandler 
    events:
      - http:
          path	 : cc/getcommonmaster
          request:
          method : post
          cors:
            origins:
              - '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token

  getcompanymaster:
    handler: CCMasters/MastersAPI.getcompanymasterhandler 
    events:
      - http:
          path	 : cc/getcompanymaster
          request:
          method : post
          cors:
            origins:
              - '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token

  customerregistration:
    handler: CCCustomer/CustomerRegistration.handler 
    events:
      - http:
          path	 : cc/customerregistration
          request:
          method : post
          cors:
            origins:
              - '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token

  getcustomerinfo:
    handler: CCCustomer/CustomerRegistration.customerinfohandler 
    events:
      - http:
          path	 : cc/getcustomerinfo
          request:
          method : post
          cors:
            origins:
              - '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token

              
  getoffers:
    handler: CCOffers/Offers.handler 
    events:
      - http:
          path	 : cc/getoffers
          request:
          method : post
          cors:
            origins:
              - '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token

  getageoffercheck:
    handler: CCOffers/Offers.getageoffercheckhandler 
    events:
      - http:
          path	 : cc/getageoffercheck
          request:
          method : post
          cors:
            origins:
              - '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token

              
  customerverification:
    handler: CCCustomer/CustomerRegistration.customerverificationhandler 
    events:
      - http:
          path	 : cc/customerverification
          request:
          method : post
          cors:
            origins:
              - '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token

                
  createapplication:
    handler: CCApplication/Application.handler 
    events:
      - http:
          path	 : cc/createapplication
          request:
          method : post
          cors:
            origins:
              - '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token

                 
  updatepplication:
    handler: CCApplication/Application.updateapplicationhandler 
    events:
      - http:
          path	 : cc/updateapplication
          request:
          method : post
          cors:
            origins:
              - '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token

  createcustomerprofile:
    handler: CCCustomer/CustomerRegistration.customerprofilehandler 
    events:
      - http:
          path	 : cc/createcustomerprofile
          request:
          method : post
          cors:
            origins:
              - '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token

  getcardfeatures:
    handler: CCOffers/Offers.cardfeatureshandler 
    events:
      - http:
          path	 : cc/getcardfeatures
          request:
          method : post
          cors:
            origins:
              - '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token

              
  getqualification:
    handler: CCMasters/MastersAPI.getqualificationhandler 
    events:
      - http:
          path	 : cc/getqualification
          request:
          method : post
          cors:
            origins:
              - '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token

  sendsms:
    handler: CCSMS/SMS.handler 
    events:
      - http:
          path	 : cc/sendsms
          request:
          method : post
          cors:
            origins:
              - '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token

  getpincode:
    handler: CCMasters/MastersAPI.getpincodehandler 
    events:
      - http:
          path	 : cc/getpincode
          request:
          method : post
          cors:
            origins:
              - '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token

  getcitybypincode:
    handler: CCMasters/MastersAPI.getcitybypincoecodehandler 
    events:
      - http:
          path	 : cc/getcitybypincode
          request:
          method : post
          cors:
            origins:
              - '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token

  updatemobilenobycustid:
    handler: CCCustomer/CustomerRegistration.mobnoupdatebycustidhandler 
    events:
      - http:
          path	 : cc/updatemobilenobycustid
          request:
          method : post
          cors:
            origins:
              - '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token

  updateotpbycustid:
    handler: CCCustomer/CustomerRegistration.otpupdatebycustidhandler 
    events:
      - http:
          path	 : cc/updateotpbycustid
          request:
          method : post
          cors:
            origins:
              - '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token

  getcity:
    handler: CCMasters/MastersAPI.getcityhandler 
    events:
      - http:
          path	 : cc/getcity
          request:
          method : post
          cors:
            origins:
              - '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token

  getstate:
    handler: CCMasters/MastersAPI.getstatehandler 
    events:
      - http:
          path	 : cc/getstate
          request:
          method : get
          cors:
            origins:
              - '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token

  getcardviewdetails:
    handler: CCOffers/Offers.cardviewdetailshandler 
    events:
      - http:
          path	 : cc/getcardviewdetails
          request:
          method : post
          cors:
            origins:
              - '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token

  getbank:
    handler: CCMasters/MastersAPI.getbankhandler 
    events:
      - http:
          path	 : cc/getbank
          request:
          method : get
          cors:
            origins:
              - '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token

  createrequest:
    handler: Experian/Experian.handler 
    events:
      - http:
          path	 : cc/createrequest
          request:
          method : post
          cors:
            origins:
              - '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
 

  
          #integration : lambda
          #authorizer:
          #arn: "${opt:stage, self:custom.AUTH_POOL_ARN}"
 

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
